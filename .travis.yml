language: generic

os: linux
dist: bionic

# add toolchains for newer, C++14 supporting gcc-6
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - gcc-8
    - g++-8

services:
- xvfb

env:
    - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"

jobs:
    include:
        - python: "2.7"
          env: GL="gt" PYVERSION="2.7"
        - python: "2.7"
          env: GL="nngt" PYVERSION="2.7"
        - python: "2.7"
          env: GL="ig" PYVERSION="2.7"
        - python: "2.7"
          env: GL="nx" PYVERSION="2.7"
        - python: "3.x"
          env: GL="gt" PYVERSION="3.x"
        - python: "3.x"
          env: GL="ig" PYVERSION="3.x"
        - python: "3.x"
          env: GL="nx" PYVERSION="3.x"
        - python: "3.x"
          env: GL="nngt" PYVERSION="3.x"
    fast_finish: true

cache:
    - apt
    - pip

before_install:
    - if [[ "$GL" == "gt" ]]; then
        sudo sh -c 'echo -n "deb http://downloads.skewed.de/apt/bionic bionic universe\n" >> /etc/apt/sources.list';
        sudo sh -c 'echo -n "deb-src http://downloads.skewed.de/apt/bionic bionic universe\n" >> /etc/apt/sources.list';
        sudo apt-key adv --keyserver keys.openpgp.org --recv-key 612DEFB798507F25;
      fi
    # update package repository status (-qq is more quiet)
    - sudo add-apt-repository -y ppa:nest-simulator/nest
    - sudo rm -rf /var/lib/apt/lists/*
    - ls /etc/apt/sources.list.d/
    - sudo apt-get update -qq
    # remove any obsolete libraries
    - sudo apt-get autoremove
    # requirements for building + installing scipy
    - sudo apt-get install -y build-essential autoconf automake libtool python-all-dev libblas-dev liblapack-dev libatlas-base-dev gfortran libxml2-dev openmpi-bin libopenmpi-dev
    # install nest
    - if [[ "$PYVERSION" == "2.7" ]]; then sudo apt-get install -y nest; fi
    # install scipy from apt (much faster when possible) and pip if necessary
    - if [[ "$PYVERSION" == "2.7" ]]; then sudo apt-get install -y python-gtk2-dev python-matplotlib python-mpi4py python-tk; fi
    - if [[ "$PYVERSION" == "3.x" ]]; then sudo apt-get install -y python3-pip python3-matplotlib python3-mpi4py python3-tk; fi
    # Pip alias and additional libraries
    - shopt -s expand_aliases
    - if [[ "$PYVERSION" == "2.7" ]]; then alias sudo='sudo -H ' && alias pipv=pip; else alias sudo='sudo -H ' && alias pipv=pip3; fi
    - sudo pipv install --upgrade pip
    - sudo pipv install -U setuptools
    - sudo pipv install --user cython
    - sudo pipv install numpy scipy shapely numpy svg.path dxfgrabber pathlib pytest pytest-mpi pytest-cov coveralls
    # install graph-tool, igraph, and networkx
    - if [[ "$PYVERSION" == "2.7" && "$GL" == "gt" ]]; then sudo apt-get install -y python-graph-tool; fi
    - if [[ "$PYVERSION" == "3.x" && "$GL" == "gt" ]]; then sudo apt-get install -y python3-graph-tool; fi
    - if [[ "$PYVERSION" == "3.x" && "$GL" == "ig" ]]; then sudo apt-get install python3-cairo libxml2-dev; fi
    - if [[ "$GL" == "ig" ]]; then sudo pipv install python-igraph; fi
    - if [[ "$GL" == "nx" ]]; then sudo pipv install networkx; fi

install: sudo pipv install -e .

script:
    - pytest --cov-config=.coveragerc --cov=nngt testing
    - export OMP=4 && pytest --cov-config=.coveragerc --cov=nngt --cov-append testing
    - export OMP=1 && export MPI=1 && mpirun -n 4 pytest --cov-config=.coveragerc --cov=nngt --cov-append --with-mpi testing

after_success: coveralls
